# -*- coding: utf-8 -*-
"""customer_clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cJ1U6M-pOOoIxm71bO_3_cRNJxfcAWQx
"""

!pip install kmodes

!pip install kneed

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import csv
from kmodes.kprototypes import KPrototypes
from sklearn.metrics import silhouette_samples, silhouette_score
from sklearn.datasets import make_blobs
from kneed import KneeLocator

df = pd.read_csv("https://raw.githubusercontent.com/saujanya01/kprototype_clustering/master/bank-additional-full.csv")

customer = df[:100]
customer

"""1 - age (numeric)

   2 - job : type of job (categorical: "admin.","blue-collar","entrepreneur","housemaid","management","retired","self-employed","services","student","technician","unemployed","unknown")

   3 - marital : marital status (categorical: "divorced","married","single","unknown"; note: "divorced" means divorced or widowed)

   4 - education (categorical: "basic.4y","basic.6y","basic.9y","high.school","illiterate","professional.course","university.degree","unknown")

   5 - default: has credit in default? (categorical: "no","yes","unknown")

   6 - housing: has housing loan? (categorical: "no","yes","unknown")

   7 - loan: has personal loan? (categorical: "no","yes","unknown")

   # related with the last contact of the current campaign:

   8 - contact: contact communication type (categorical: "cellular","telephone") 

   9 - month: last contact month of year (categorical: "jan", "feb", "mar", ..., "nov", "dec")

  10 - day_of_week: last contact day of the week (categorical: "mon","tue","wed","thu","fri")

  11 - duration: last contact duration, in seconds (numeric). Important note:  this attribute highly affects the output target (e.g., if duration=0 then y="no"). Yet, the duration is not known before a call is performed. Also, after the end of the call y is obviously known. Thus, this input should only be included for benchmark purposes and should be discarded if the intention is to have a realistic predictive model.

   # other attributes(contact behaviour):

  12 - campaign: number of contacts performed during this campaign and for this client (numeric, includes last contact)

  13 - pdays: number of days that passed by after the client was last contacted from a previous campaign (numeric; 999 means client was not previously contacted)

  14 - previous: number of contacts performed before this campaign and for this client (numeric)

  15 - poutcome: outcome of the previous marketing campaign (categorical: "failure","nonexistent","success")

   # social and economic context attributes

  16 - emp.var.rate: employment variation rate - quarterly indicator (numeric)(drop)

  17 - cons.price.idx: consumer price index - monthly indicator (numeric)     

  18 - cons.conf.idx: consumer confidence index - monthly indicator (numeric)     

  19 - euribor3m: euribor 3 month rate - daily indicator (numeric)(drop)

  20 - nr.employed: number of employees - quarterly indicator (numeric)(drop)



  Output variable (desired target):

  21 - y - has the client subscribed a term deposit? (binary: "yes","no")(drop)
"""

customer = customer.drop(['y'],axis=1)

customer.columns

for i in customer.columns:
    print(i)
    print(customer[i].value_counts())
    print("\n--------------------------------------\n")

ind = []
l = customer.dtypes
for i in range(len(l)):
    if (str(l[i])=='object'):
        ind.append(i)

ind

c_data = [customer.columns[i] for i in ind]

c_data

d={}
k=0
for i in customer.columns:
    d[i]=k
    k=k+1

customer.rename(columns=d,inplace=True)

customer

c_list=[]
cluster_dict={}
for i in range(1,11):
  kproto = KPrototypes(n_clusters=i, init='Cao', verbose=2)
  clusters = kproto.fit_predict(customer, categorical=ind)
  cluster_dict[i]=clusters
  c_list.append(kproto.cost_)
  # c_list.append(silhouette_score(customer, clusters))
  print("------------------------------------------------------")

# plt.plot(c_list)
sns.lineplot(x=c_list,y=range(0,len(c_list)))

y=c_list
x = range(1, len(y)+1)
kn = KneeLocator(x, y, curve='convex', direction='decreasing')
print(kn.knee)

cluster_dict[kn.knee]

customer.iloc[0]

cd={}
for i in range(kn.knee):
  cd[i]=[]

cd

for i in range(0,len(cluster_dict[kn.knee])):
  cd[cluster_dict[kn.knee][i]].append(i)

cd

